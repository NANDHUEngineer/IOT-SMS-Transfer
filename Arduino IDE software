By using this Arduino IDE software, we create code in c and c++ for Data Transferring 
 
#include <Adafruit_GFX.h> // Core graphics library #include <TftSpfd5408.h> // Hardware-specific library 
#include <SD.h> 
#include <SPI.h> 
 
#define BLACK  0x0000 
	#define BLUE 	0x001F 
 
	#define RED 	0xF800 
#define GREEN   0x07E0 
#define CYAN  0x07FF 
#define MAGENTA 0xF81F 
#define YELLOW 0xFFE0 
#define WHITE   0xFFFF 
TftSpfd5408 tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, A4); 
 
void setup() 
{
tft.reset(); 
Serial.begin(9600); 
 
 tft.begin(0x9341); 
 
if (!SD.begin(SD_CS)) { 
return; 
} tft.setRotation(1); bmpDraw("2.bmp", 0, 0); tft.setRotation(1); 
 
} 
 
int val; long l; char lf; long gg; char hl[10]; void loop() 
{ 
 
val=analogRead(A5); val=analogRead(A5); 
// Serial.println(val); 
if(val>60) 
{ if(lf==0) lf=1; 
if(l<100) l=l+ 50; 
} else 
{ 
 
if(l>0) 
l--; 
} 
 
if(lf==1) 
{ 
 
if(gg==0) 
{ 
Serial.print("*Normal#"); tft.setCursor(0, 0); 
tft.setTextColor(RED); tft.setTextSize(2); tft.println("Normal"); 
gg=1000; 
} 
 
if(l>0) 
{ if(gg>0) gg--; } if(l==0) 
{ 
Serial.print("*Brain_Dead#"); tft.fillScreen(WHITE); tft.setCursor(0, 0); 
tft.setTextColor(RED); tft.setTextSize(2); tft.println("Brain Dead"); 
} 
} if((lf==1)&&(l>0)) 
{ tft.drawCircle(100, 100, 2, 0x98FF); 
tft.drawCircle(200, 100, 2, 0x98FF); 
tft.drawCircle(100, 150, 2, 0x98FF); 
tft.drawCircle(120, 50, 2, 0x98FF);
 tft.drawCircle(160, 60, 2, 0x98FF); 
tft.drawCircle(170, 70, 2, 0x98FF); 
tft.drawCircle(120, 80, 2, 0x98FF); 
tft.drawCircle(150, 90, 2, 0x98FF);
 tft.drawCircle(60, 100, 2, 0x98FF); 
tft.drawCircle(80, 110, 2, 0x98FF); 
tft.drawCircle(90, 120, 2, 0x98FF);
 delay(200); 
tft.drawCircle(100, 100, 2, 0xAA);
 tft.drawCircle(200, 100, 2, 0xAA); 
tft.drawCircle(100, 150, 2, 0xAA); 
tft.drawCircle(120, 50, 2, 0xAA);
 tft.drawCircle(160, 60, 2, 0xAA); 
tft.drawCircle(170, 70, 2, 0xAA); 
tft.drawCircle(120, 80, 2, 0xAA); 
tft.drawCircle(150, 90, 2, 0xAA); 
tft.drawCircle(60, 100, 2, 0xAA); 
tft.drawCircle(80, 110, 2, 0xAA);
 tft.drawCircle(90, 120, 2, 0xAA); 
 
delay(200); 
} 
if((lf==1)&&(l==0)) 
{ lf=2; tft.drawCircle(100, 100, 2, 0xFFFF); 
tft.drawCircle(200, 100, 2, 0xFFFF); 
tft.drawCircle(100, 150, 2, 0xFFFF);
 tft.drawCircle(120, 50, 2, 0xFFFF); 
tft.drawCircle(160, 60, 2, 0xFFFF); 
tft.drawCircle(170, 70, 2, 0xFFFF); t
ft.drawCircle(120, 80, 2, 0xFFFF); t
ft.drawCircle(150, 90, 2, 0xFFFF); 
tft.drawCircle(60, 100, 2, 0xFFFF); 
tft.drawCircle(80, 110, 2, 0xFFFF);
 tft.drawCircle(90, 120, 2, 0xFFFF);
 delay(200); 
} 
} 
 
#define BUFFPIXEL 20 
void bmpDraw(char *filename, int x, int y) { 
File bmpFile; int bmpWidth, bmpHeight; 
uint8_t bmpDepth; u
int32_t bmpImageoffset; 
uint32_t rowSize; 
uint8_t sdbuffer[3*BUFFPIXEL]; 
uint16_t lcdbuffer[BUFFPIXEL]; 
uint8_t buffidx = sizeof(sdbuffer); 
boolean goodBmp = false; 
boolean flip = true; 
int w, h, row, col; uint8_t r, g, b; 
uint32_t pos = 0, startTime = millis(); 
uint8_t lcdidx = 0; boolean first = true; if((x >= tft.width()) || (y >= tft.height())) retu rn; 
Serial.println(); 
Serial.print(F("Loading image '")); 
Serial.print(filename); Serial.println('\''); 
if ((bmpFile = SD.open(filename)) == NULL) { Serial.println(F("File not found")); return; } if(read16(bmpFile) == 0x4D42) 
{ 
Serial.println(F("File size: ")); 
Serial.println(read32(bmpFile)); 
(void)read32(bmpFile); bmpImageoffset = read32(bmpFile); 
Serial.print(F("Image Offset: ")); 
Serial.println(bmpImageoffset, DEC); 
Serial.print(F("Header size: ")); 
Serial.println(read32(bmpFile)); bmpWidth = read32(bmpFile);
 bmpHeight = read32(bmpFile); if(read16(bmpFile) == 1) 
{ bmpDepth = read16(bmpFile); 
Serial.print(F("Bit Depth: ")); 
Serial.println(bmpDepth); if((bmpDepth == 24) && (read32(bmpFile) == 0)) 
{ goodBmp = true; 
Serial.print(F("Image size: ")); 
Serial.print(bmpWidth); 
Serial.print('x'); 
Serial.println(bmpHeight); rowSize = (bmpWidth * 3 + 3) & ~3;. if(bmpHeight < 0) { 
bmpHeight = -bmpHeight; flip 	= false; 
} 
w = bmpWidth; h = bmpHeight; 
if((x+w-1) >= tft.width()) w = tft.width() - x; if((y+h-1) >= tft.height()) h = tft.height() - y; tft.setAddrWindow(x, y, x+w-1, y+h-1); 
for (row=0; row<h; row++) 
{ if(flip) 
pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize; 
else // Bitmap is stored top-to-bottom pos = bmpImageoffset + row * rowSize; if(bmpFile.position() != pos) 
{ bmpFile.seek(pos); buffidx = sizeof(sdbuffer); 
} 
 
for (col=0; col<w; col++) 
{ if (buffidx >= sizeof(sdbuffer)) 
{ if(lcdidx > 0) 
{ tft.pushColors(lcdbuffer, lcdidx, first); lcdidx = 0; first = false; 
} 
bmpFile.read(sdbuffer, sizeof(sdbuffer)); buffidx = 0; 
} b = sdbuffer[buffidx++];
 g = sdbuffer[buffidx++]; r = sdbuffer[buffidx++]; 
lcdbuffer[lcdidx++] = tft.color565(r,g,b); } 
} if(lcdidx > 0) { 
tft.pushColors(lcdbuffer, lcdidx, first); 
} 
Serial.print(F("Loaded in ")); 
Serial.print(millis() - startTime); 
Serial.println(" ms"); 
} 
} 
} 
 
bmpFile.close(); if(!goodBmp) Serial.println(F("BMP format not recognized.")); } 
 
uint16_t read16(File f) { 
uint16_t result; 
((uint8_t *)&result)[0] = f.read(); ((uint8_t *)&result)[1] = f.read(); return result; 
} 
 
uint32_t read32(File f) 
{ uint32_t result; 
((uint8_t *)&result)[0] = f.read(); 
((uint8_t *)&result)[1] = f.read(); 
((uint8_t *)&result)[2] = f.read(); ((uint8_t *)&result)[3] = f.read(); return result; 
